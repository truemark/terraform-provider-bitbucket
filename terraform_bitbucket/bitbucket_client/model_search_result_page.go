/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// SearchResultPage struct for SearchResultPage
type SearchResultPage struct {
	Size *int64 `json:"size,omitempty"`
	Page *int32 `json:"page,omitempty"`
	Pagelen *int32 `json:"pagelen,omitempty"`
	QuerySubstituted *bool `json:"query_substituted,omitempty"`
	Next *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Values *[]SearchCodeSearchResult `json:"values,omitempty"`
}

// NewSearchResultPage instantiates a new SearchResultPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultPage() *SearchResultPage {
	this := SearchResultPage{}
	return &this
}

// NewSearchResultPageWithDefaults instantiates a new SearchResultPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultPageWithDefaults() *SearchResultPage {
	this := SearchResultPage{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SearchResultPage) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultPage) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SearchResultPage) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *SearchResultPage) SetSize(v int64) {
	o.Size = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SearchResultPage) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultPage) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SearchResultPage) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *SearchResultPage) SetPage(v int32) {
	o.Page = &v
}

// GetPagelen returns the Pagelen field value if set, zero value otherwise.
func (o *SearchResultPage) GetPagelen() int32 {
	if o == nil || o.Pagelen == nil {
		var ret int32
		return ret
	}
	return *o.Pagelen
}

// GetPagelenOk returns a tuple with the Pagelen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultPage) GetPagelenOk() (*int32, bool) {
	if o == nil || o.Pagelen == nil {
		return nil, false
	}
	return o.Pagelen, true
}

// HasPagelen returns a boolean if a field has been set.
func (o *SearchResultPage) HasPagelen() bool {
	if o != nil && o.Pagelen != nil {
		return true
	}

	return false
}

// SetPagelen gets a reference to the given int32 and assigns it to the Pagelen field.
func (o *SearchResultPage) SetPagelen(v int32) {
	o.Pagelen = &v
}

// GetQuerySubstituted returns the QuerySubstituted field value if set, zero value otherwise.
func (o *SearchResultPage) GetQuerySubstituted() bool {
	if o == nil || o.QuerySubstituted == nil {
		var ret bool
		return ret
	}
	return *o.QuerySubstituted
}

// GetQuerySubstitutedOk returns a tuple with the QuerySubstituted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultPage) GetQuerySubstitutedOk() (*bool, bool) {
	if o == nil || o.QuerySubstituted == nil {
		return nil, false
	}
	return o.QuerySubstituted, true
}

// HasQuerySubstituted returns a boolean if a field has been set.
func (o *SearchResultPage) HasQuerySubstituted() bool {
	if o != nil && o.QuerySubstituted != nil {
		return true
	}

	return false
}

// SetQuerySubstituted gets a reference to the given bool and assigns it to the QuerySubstituted field.
func (o *SearchResultPage) SetQuerySubstituted(v bool) {
	o.QuerySubstituted = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *SearchResultPage) GetNext() string {
	if o == nil || o.Next == nil {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultPage) GetNextOk() (*string, bool) {
	if o == nil || o.Next == nil {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *SearchResultPage) HasNext() bool {
	if o != nil && o.Next != nil {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *SearchResultPage) SetNext(v string) {
	o.Next = &v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *SearchResultPage) GetPrevious() string {
	if o == nil || o.Previous == nil {
		var ret string
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultPage) GetPreviousOk() (*string, bool) {
	if o == nil || o.Previous == nil {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *SearchResultPage) HasPrevious() bool {
	if o != nil && o.Previous != nil {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given string and assigns it to the Previous field.
func (o *SearchResultPage) SetPrevious(v string) {
	o.Previous = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *SearchResultPage) GetValues() []SearchCodeSearchResult {
	if o == nil || o.Values == nil {
		var ret []SearchCodeSearchResult
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultPage) GetValuesOk() (*[]SearchCodeSearchResult, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *SearchResultPage) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []SearchCodeSearchResult and assigns it to the Values field.
func (o *SearchResultPage) SetValues(v []SearchCodeSearchResult) {
	o.Values = &v
}

func (o SearchResultPage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Pagelen != nil {
		toSerialize["pagelen"] = o.Pagelen
	}
	if o.QuerySubstituted != nil {
		toSerialize["query_substituted"] = o.QuerySubstituted
	}
	if o.Next != nil {
		toSerialize["next"] = o.Next
	}
	if o.Previous != nil {
		toSerialize["previous"] = o.Previous
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableSearchResultPage struct {
	value *SearchResultPage
	isSet bool
}

func (v NullableSearchResultPage) Get() *SearchResultPage {
	return v.value
}

func (v *NullableSearchResultPage) Set(val *SearchResultPage) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultPage) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultPage(val *SearchResultPage) *NullableSearchResultPage {
	return &NullableSearchResultPage{value: val, isSet: true}
}

func (v NullableSearchResultPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


