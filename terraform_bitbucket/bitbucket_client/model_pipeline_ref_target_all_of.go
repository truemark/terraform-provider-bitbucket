/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// PipelineRefTargetAllOf A Bitbucket Pipelines reference target.
type PipelineRefTargetAllOf struct {
	// The type of reference (branch/tag).
	RefType *string `json:"ref_type,omitempty"`
	// The name of the reference.
	RefName *string `json:"ref_name,omitempty"`
	Commit *Commit `json:"commit,omitempty"`
	Selector *PipelineSelector `json:"selector,omitempty"`
}

// NewPipelineRefTargetAllOf instantiates a new PipelineRefTargetAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineRefTargetAllOf() *PipelineRefTargetAllOf {
	this := PipelineRefTargetAllOf{}
	return &this
}

// NewPipelineRefTargetAllOfWithDefaults instantiates a new PipelineRefTargetAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineRefTargetAllOfWithDefaults() *PipelineRefTargetAllOf {
	this := PipelineRefTargetAllOf{}
	return &this
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *PipelineRefTargetAllOf) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineRefTargetAllOf) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *PipelineRefTargetAllOf) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *PipelineRefTargetAllOf) SetRefType(v string) {
	o.RefType = &v
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *PipelineRefTargetAllOf) GetRefName() string {
	if o == nil || o.RefName == nil {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineRefTargetAllOf) GetRefNameOk() (*string, bool) {
	if o == nil || o.RefName == nil {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *PipelineRefTargetAllOf) HasRefName() bool {
	if o != nil && o.RefName != nil {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *PipelineRefTargetAllOf) SetRefName(v string) {
	o.RefName = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *PipelineRefTargetAllOf) GetCommit() Commit {
	if o == nil || o.Commit == nil {
		var ret Commit
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineRefTargetAllOf) GetCommitOk() (*Commit, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *PipelineRefTargetAllOf) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given Commit and assigns it to the Commit field.
func (o *PipelineRefTargetAllOf) SetCommit(v Commit) {
	o.Commit = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *PipelineRefTargetAllOf) GetSelector() PipelineSelector {
	if o == nil || o.Selector == nil {
		var ret PipelineSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineRefTargetAllOf) GetSelectorOk() (*PipelineSelector, bool) {
	if o == nil || o.Selector == nil {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *PipelineRefTargetAllOf) HasSelector() bool {
	if o != nil && o.Selector != nil {
		return true
	}

	return false
}

// SetSelector gets a reference to the given PipelineSelector and assigns it to the Selector field.
func (o *PipelineRefTargetAllOf) SetSelector(v PipelineSelector) {
	o.Selector = &v
}

func (o PipelineRefTargetAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RefType != nil {
		toSerialize["ref_type"] = o.RefType
	}
	if o.RefName != nil {
		toSerialize["ref_name"] = o.RefName
	}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.Selector != nil {
		toSerialize["selector"] = o.Selector
	}
	return json.Marshal(toSerialize)
}

type NullablePipelineRefTargetAllOf struct {
	value *PipelineRefTargetAllOf
	isSet bool
}

func (v NullablePipelineRefTargetAllOf) Get() *PipelineRefTargetAllOf {
	return v.value
}

func (v *NullablePipelineRefTargetAllOf) Set(val *PipelineRefTargetAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineRefTargetAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineRefTargetAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineRefTargetAllOf(val *PipelineRefTargetAllOf) *NullablePipelineRefTargetAllOf {
	return &NullablePipelineRefTargetAllOf{value: val, isSet: true}
}

func (v NullablePipelineRefTargetAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineRefTargetAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


