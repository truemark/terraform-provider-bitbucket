/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// PipelineStateCompletedAllOf A Bitbucket Pipelines COMPLETED pipeline state.
type PipelineStateCompletedAllOf struct {
	// The name of pipeline state (COMPLETED).
	Name *string `json:"name,omitempty"`
	Result *PipelineStateCompletedResult `json:"result,omitempty"`
}

// NewPipelineStateCompletedAllOf instantiates a new PipelineStateCompletedAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineStateCompletedAllOf() *PipelineStateCompletedAllOf {
	this := PipelineStateCompletedAllOf{}
	return &this
}

// NewPipelineStateCompletedAllOfWithDefaults instantiates a new PipelineStateCompletedAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineStateCompletedAllOfWithDefaults() *PipelineStateCompletedAllOf {
	this := PipelineStateCompletedAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PipelineStateCompletedAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStateCompletedAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PipelineStateCompletedAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PipelineStateCompletedAllOf) SetName(v string) {
	o.Name = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *PipelineStateCompletedAllOf) GetResult() PipelineStateCompletedResult {
	if o == nil || o.Result == nil {
		var ret PipelineStateCompletedResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStateCompletedAllOf) GetResultOk() (*PipelineStateCompletedResult, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *PipelineStateCompletedAllOf) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given PipelineStateCompletedResult and assigns it to the Result field.
func (o *PipelineStateCompletedAllOf) SetResult(v PipelineStateCompletedResult) {
	o.Result = &v
}

func (o PipelineStateCompletedAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullablePipelineStateCompletedAllOf struct {
	value *PipelineStateCompletedAllOf
	isSet bool
}

func (v NullablePipelineStateCompletedAllOf) Get() *PipelineStateCompletedAllOf {
	return v.value
}

func (v *NullablePipelineStateCompletedAllOf) Set(val *PipelineStateCompletedAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineStateCompletedAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineStateCompletedAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineStateCompletedAllOf(val *PipelineStateCompletedAllOf) *NullablePipelineStateCompletedAllOf {
	return &NullablePipelineStateCompletedAllOf{value: val, isSet: true}
}

func (v NullablePipelineStateCompletedAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineStateCompletedAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


