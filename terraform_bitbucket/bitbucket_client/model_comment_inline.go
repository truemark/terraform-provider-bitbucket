/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// CommentInline struct for CommentInline
type CommentInline struct {
	// The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.
	To *int32 `json:"to,omitempty"`
	// The comment's anchor line in the old version of the file.
	From *int32 `json:"from,omitempty"`
	// The path of the file this comment is anchored to.
	Path string `json:"path"`
}

// NewCommentInline instantiates a new CommentInline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentInline(path string) *CommentInline {
	this := CommentInline{}
	this.Path = path
	return &this
}

// NewCommentInlineWithDefaults instantiates a new CommentInline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentInlineWithDefaults() *CommentInline {
	this := CommentInline{}
	return &this
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *CommentInline) GetTo() int32 {
	if o == nil || o.To == nil {
		var ret int32
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentInline) GetToOk() (*int32, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *CommentInline) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given int32 and assigns it to the To field.
func (o *CommentInline) SetTo(v int32) {
	o.To = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *CommentInline) GetFrom() int32 {
	if o == nil || o.From == nil {
		var ret int32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentInline) GetFromOk() (*int32, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *CommentInline) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int32 and assigns it to the From field.
func (o *CommentInline) SetFrom(v int32) {
	o.From = &v
}

// GetPath returns the Path field value
func (o *CommentInline) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CommentInline) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *CommentInline) SetPath(v string) {
	o.Path = v
}

func (o CommentInline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["path"] = o.Path
	}
	return json.Marshal(toSerialize)
}

type NullableCommentInline struct {
	value *CommentInline
	isSet bool
}

func (v NullableCommentInline) Get() *CommentInline {
	return v.value
}

func (v *NullableCommentInline) Set(val *CommentInline) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentInline) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentInline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentInline(val *CommentInline) *NullableCommentInline {
	return &NullableCommentInline{value: val, isSet: true}
}

func (v NullableCommentInline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentInline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


