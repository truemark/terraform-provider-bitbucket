/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
	"time"
)

// DeployKey Represents deploy key for a repository.
type DeployKey struct {
	// The deploy key value.
	Key *string `json:"key,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
	// The comment parsed from the deploy key (if present)
	Comment *string `json:"comment,omitempty"`
	// The user-defined label for the deploy key
	Label *string `json:"label,omitempty"`
	AddedOn *time.Time `json:"added_on,omitempty"`
	LastUsed *time.Time `json:"last_used,omitempty"`
	Links *BranchingModelSettingsLinks `json:"links,omitempty"`
	Owner *Account `json:"owner,omitempty"`
}

// NewDeployKey instantiates a new DeployKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployKey() *DeployKey {
	this := DeployKey{}
	return &this
}

// NewDeployKeyWithDefaults instantiates a new DeployKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployKeyWithDefaults() *DeployKey {
	this := DeployKey{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DeployKey) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DeployKey) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DeployKey) SetKey(v string) {
	o.Key = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *DeployKey) GetRepository() Repository {
	if o == nil || o.Repository == nil {
		var ret Repository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetRepositoryOk() (*Repository, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *DeployKey) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given Repository and assigns it to the Repository field.
func (o *DeployKey) SetRepository(v Repository) {
	o.Repository = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DeployKey) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DeployKey) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DeployKey) SetComment(v string) {
	o.Comment = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DeployKey) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DeployKey) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DeployKey) SetLabel(v string) {
	o.Label = &v
}

// GetAddedOn returns the AddedOn field value if set, zero value otherwise.
func (o *DeployKey) GetAddedOn() time.Time {
	if o == nil || o.AddedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.AddedOn
}

// GetAddedOnOk returns a tuple with the AddedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetAddedOnOk() (*time.Time, bool) {
	if o == nil || o.AddedOn == nil {
		return nil, false
	}
	return o.AddedOn, true
}

// HasAddedOn returns a boolean if a field has been set.
func (o *DeployKey) HasAddedOn() bool {
	if o != nil && o.AddedOn != nil {
		return true
	}

	return false
}

// SetAddedOn gets a reference to the given time.Time and assigns it to the AddedOn field.
func (o *DeployKey) SetAddedOn(v time.Time) {
	o.AddedOn = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *DeployKey) GetLastUsed() time.Time {
	if o == nil || o.LastUsed == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetLastUsedOk() (*time.Time, bool) {
	if o == nil || o.LastUsed == nil {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *DeployKey) HasLastUsed() bool {
	if o != nil && o.LastUsed != nil {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given time.Time and assigns it to the LastUsed field.
func (o *DeployKey) SetLastUsed(v time.Time) {
	o.LastUsed = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DeployKey) GetLinks() BranchingModelSettingsLinks {
	if o == nil || o.Links == nil {
		var ret BranchingModelSettingsLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetLinksOk() (*BranchingModelSettingsLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DeployKey) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given BranchingModelSettingsLinks and assigns it to the Links field.
func (o *DeployKey) SetLinks(v BranchingModelSettingsLinks) {
	o.Links = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DeployKey) GetOwner() Account {
	if o == nil || o.Owner == nil {
		var ret Account
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployKey) GetOwnerOk() (*Account, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DeployKey) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Account and assigns it to the Owner field.
func (o *DeployKey) SetOwner(v Account) {
	o.Owner = &v
}

func (o DeployKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.AddedOn != nil {
		toSerialize["added_on"] = o.AddedOn
	}
	if o.LastUsed != nil {
		toSerialize["last_used"] = o.LastUsed
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	return json.Marshal(toSerialize)
}

type NullableDeployKey struct {
	value *DeployKey
	isSet bool
}

func (v NullableDeployKey) Get() *DeployKey {
	return v.value
}

func (v *NullableDeployKey) Set(val *DeployKey) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployKey) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployKey(val *DeployKey) *NullableDeployKey {
	return &NullableDeployKey{value: val, isSet: true}
}

func (v NullableDeployKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


