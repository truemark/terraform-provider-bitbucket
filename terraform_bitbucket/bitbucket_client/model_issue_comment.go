/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// IssueComment A issue comment.
type IssueComment struct {
	Issue *Issue `json:"issue,omitempty"`
}

// NewIssueComment instantiates a new IssueComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueComment() *IssueComment {
	this := IssueComment{}
	return &this
}

// NewIssueCommentWithDefaults instantiates a new IssueComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCommentWithDefaults() *IssueComment {
	this := IssueComment{}
	return &this
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *IssueComment) GetIssue() Issue {
	if o == nil || o.Issue == nil {
		var ret Issue
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueComment) GetIssueOk() (*Issue, bool) {
	if o == nil || o.Issue == nil {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *IssueComment) HasIssue() bool {
	if o != nil && o.Issue != nil {
		return true
	}

	return false
}

// SetIssue gets a reference to the given Issue and assigns it to the Issue field.
func (o *IssueComment) SetIssue(v Issue) {
	o.Issue = &v
}

func (o IssueComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Issue != nil {
		toSerialize["issue"] = o.Issue
	}
	return json.Marshal(toSerialize)
}

type NullableIssueComment struct {
	value *IssueComment
	isSet bool
}

func (v NullableIssueComment) Get() *IssueComment {
	return v.value
}

func (v *NullableIssueComment) Set(val *IssueComment) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueComment) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueComment(val *IssueComment) *NullableIssueComment {
	return &NullableIssueComment{value: val, isSet: true}
}

func (v NullableIssueComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


