/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
	"time"
)

// Repository A Bitbucket repository.
type Repository struct {
	Links *RepositoryLinks `json:"links,omitempty"`
	// The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.
	Uuid *string `json:"uuid,omitempty"`
	// The concatenation of the repository owner's username and the slugified name, e.g. \"evzijst/interruptingcow\". This is the same string used in Bitbucket URLs.
	FullName *string `json:"full_name,omitempty"`
	IsPrivate *bool `json:"is_private,omitempty"`
	Parent *Repository `json:"parent,omitempty"`
	Scm *string `json:"scm,omitempty"`
	Owner *Account `json:"owner,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	UpdatedOn *time.Time `json:"updated_on,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Language *string `json:"language,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	//  Controls the rules for forking this repository.  * **allow_forks**: unrestricted forking * **no_public_forks**: restrict forking to private forks (forks cannot   be made public later) * **no_forks**: deny all forking 
	ForkPolicy *string `json:"fork_policy,omitempty"`
	Project *Project `json:"project,omitempty"`
	Mainbranch *Branch `json:"mainbranch,omitempty"`
}

// NewRepository instantiates a new Repository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepository() *Repository {
	this := Repository{}
	return &this
}

// NewRepositoryWithDefaults instantiates a new Repository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWithDefaults() *Repository {
	this := Repository{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Repository) GetLinks() RepositoryLinks {
	if o == nil || o.Links == nil {
		var ret RepositoryLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetLinksOk() (*RepositoryLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Repository) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given RepositoryLinks and assigns it to the Links field.
func (o *Repository) SetLinks(v RepositoryLinks) {
	o.Links = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Repository) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Repository) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Repository) SetUuid(v string) {
	o.Uuid = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *Repository) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *Repository) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *Repository) SetFullName(v string) {
	o.FullName = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *Repository) GetIsPrivate() bool {
	if o == nil || o.IsPrivate == nil {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsPrivateOk() (*bool, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *Repository) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *Repository) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Repository) GetParent() Repository {
	if o == nil || o.Parent == nil {
		var ret Repository
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetParentOk() (*Repository, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Repository) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given Repository and assigns it to the Parent field.
func (o *Repository) SetParent(v Repository) {
	o.Parent = &v
}

// GetScm returns the Scm field value if set, zero value otherwise.
func (o *Repository) GetScm() string {
	if o == nil || o.Scm == nil {
		var ret string
		return ret
	}
	return *o.Scm
}

// GetScmOk returns a tuple with the Scm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetScmOk() (*string, bool) {
	if o == nil || o.Scm == nil {
		return nil, false
	}
	return o.Scm, true
}

// HasScm returns a boolean if a field has been set.
func (o *Repository) HasScm() bool {
	if o != nil && o.Scm != nil {
		return true
	}

	return false
}

// SetScm gets a reference to the given string and assigns it to the Scm field.
func (o *Repository) SetScm(v string) {
	o.Scm = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Repository) GetOwner() Account {
	if o == nil || o.Owner == nil {
		var ret Account
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetOwnerOk() (*Account, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Repository) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Account and assigns it to the Owner field.
func (o *Repository) SetOwner(v Account) {
	o.Owner = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Repository) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Repository) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Repository) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Repository) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Repository) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Repository) SetDescription(v string) {
	o.Description = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *Repository) GetCreatedOn() time.Time {
	if o == nil || o.CreatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || o.CreatedOn == nil {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *Repository) HasCreatedOn() bool {
	if o != nil && o.CreatedOn != nil {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *Repository) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

// GetUpdatedOn returns the UpdatedOn field value if set, zero value otherwise.
func (o *Repository) GetUpdatedOn() time.Time {
	if o == nil || o.UpdatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedOn
}

// GetUpdatedOnOk returns a tuple with the UpdatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUpdatedOnOk() (*time.Time, bool) {
	if o == nil || o.UpdatedOn == nil {
		return nil, false
	}
	return o.UpdatedOn, true
}

// HasUpdatedOn returns a boolean if a field has been set.
func (o *Repository) HasUpdatedOn() bool {
	if o != nil && o.UpdatedOn != nil {
		return true
	}

	return false
}

// SetUpdatedOn gets a reference to the given time.Time and assigns it to the UpdatedOn field.
func (o *Repository) SetUpdatedOn(v time.Time) {
	o.UpdatedOn = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Repository) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Repository) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Repository) SetSize(v int32) {
	o.Size = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Repository) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Repository) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Repository) SetLanguage(v string) {
	o.Language = &v
}

// GetHasIssues returns the HasIssues field value if set, zero value otherwise.
func (o *Repository) GetHasIssues() bool {
	if o == nil || o.HasIssues == nil {
		var ret bool
		return ret
	}
	return *o.HasIssues
}

// GetHasIssuesOk returns a tuple with the HasIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasIssuesOk() (*bool, bool) {
	if o == nil || o.HasIssues == nil {
		return nil, false
	}
	return o.HasIssues, true
}

// HasHasIssues returns a boolean if a field has been set.
func (o *Repository) HasHasIssues() bool {
	if o != nil && o.HasIssues != nil {
		return true
	}

	return false
}

// SetHasIssues gets a reference to the given bool and assigns it to the HasIssues field.
func (o *Repository) SetHasIssues(v bool) {
	o.HasIssues = &v
}

// GetHasWiki returns the HasWiki field value if set, zero value otherwise.
func (o *Repository) GetHasWiki() bool {
	if o == nil || o.HasWiki == nil {
		var ret bool
		return ret
	}
	return *o.HasWiki
}

// GetHasWikiOk returns a tuple with the HasWiki field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasWikiOk() (*bool, bool) {
	if o == nil || o.HasWiki == nil {
		return nil, false
	}
	return o.HasWiki, true
}

// HasHasWiki returns a boolean if a field has been set.
func (o *Repository) HasHasWiki() bool {
	if o != nil && o.HasWiki != nil {
		return true
	}

	return false
}

// SetHasWiki gets a reference to the given bool and assigns it to the HasWiki field.
func (o *Repository) SetHasWiki(v bool) {
	o.HasWiki = &v
}

// GetForkPolicy returns the ForkPolicy field value if set, zero value otherwise.
func (o *Repository) GetForkPolicy() string {
	if o == nil || o.ForkPolicy == nil {
		var ret string
		return ret
	}
	return *o.ForkPolicy
}

// GetForkPolicyOk returns a tuple with the ForkPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetForkPolicyOk() (*string, bool) {
	if o == nil || o.ForkPolicy == nil {
		return nil, false
	}
	return o.ForkPolicy, true
}

// HasForkPolicy returns a boolean if a field has been set.
func (o *Repository) HasForkPolicy() bool {
	if o != nil && o.ForkPolicy != nil {
		return true
	}

	return false
}

// SetForkPolicy gets a reference to the given string and assigns it to the ForkPolicy field.
func (o *Repository) SetForkPolicy(v string) {
	o.ForkPolicy = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Repository) GetProject() Project {
	if o == nil || o.Project == nil {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetProjectOk() (*Project, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Repository) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *Repository) SetProject(v Project) {
	o.Project = &v
}

// GetMainbranch returns the Mainbranch field value if set, zero value otherwise.
func (o *Repository) GetMainbranch() Branch {
	if o == nil || o.Mainbranch == nil {
		var ret Branch
		return ret
	}
	return *o.Mainbranch
}

// GetMainbranchOk returns a tuple with the Mainbranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetMainbranchOk() (*Branch, bool) {
	if o == nil || o.Mainbranch == nil {
		return nil, false
	}
	return o.Mainbranch, true
}

// HasMainbranch returns a boolean if a field has been set.
func (o *Repository) HasMainbranch() bool {
	if o != nil && o.Mainbranch != nil {
		return true
	}

	return false
}

// SetMainbranch gets a reference to the given Branch and assigns it to the Mainbranch field.
func (o *Repository) SetMainbranch(v Branch) {
	o.Mainbranch = &v
}

func (o Repository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.IsPrivate != nil {
		toSerialize["is_private"] = o.IsPrivate
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Scm != nil {
		toSerialize["scm"] = o.Scm
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.CreatedOn != nil {
		toSerialize["created_on"] = o.CreatedOn
	}
	if o.UpdatedOn != nil {
		toSerialize["updated_on"] = o.UpdatedOn
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.HasIssues != nil {
		toSerialize["has_issues"] = o.HasIssues
	}
	if o.HasWiki != nil {
		toSerialize["has_wiki"] = o.HasWiki
	}
	if o.ForkPolicy != nil {
		toSerialize["fork_policy"] = o.ForkPolicy
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Mainbranch != nil {
		toSerialize["mainbranch"] = o.Mainbranch
	}
	return json.Marshal(toSerialize)
}

type NullableRepository struct {
	value *Repository
	isSet bool
}

func (v NullableRepository) Get() *Repository {
	return v.value
}

func (v *NullableRepository) Set(val *Repository) {
	v.value = val
	v.isSet = true
}

func (v NullableRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepository(val *Repository) *NullableRepository {
	return &NullableRepository{value: val, isSet: true}
}

func (v NullableRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


