/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// PipelineVariableAllOf A Pipelines variable.
type PipelineVariableAllOf struct {
	// The UUID identifying the variable.
	Uuid *string `json:"uuid,omitempty"`
	// The unique name of the variable.
	Key *string `json:"key,omitempty"`
	// The value of the variable. If the variable is secured, this will be empty.
	Value *string `json:"value,omitempty"`
	// If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
	Secured *bool `json:"secured,omitempty"`
}

// NewPipelineVariableAllOf instantiates a new PipelineVariableAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineVariableAllOf() *PipelineVariableAllOf {
	this := PipelineVariableAllOf{}
	return &this
}

// NewPipelineVariableAllOfWithDefaults instantiates a new PipelineVariableAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineVariableAllOfWithDefaults() *PipelineVariableAllOf {
	this := PipelineVariableAllOf{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PipelineVariableAllOf) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineVariableAllOf) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PipelineVariableAllOf) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PipelineVariableAllOf) SetUuid(v string) {
	o.Uuid = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PipelineVariableAllOf) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineVariableAllOf) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PipelineVariableAllOf) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PipelineVariableAllOf) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PipelineVariableAllOf) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineVariableAllOf) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PipelineVariableAllOf) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PipelineVariableAllOf) SetValue(v string) {
	o.Value = &v
}

// GetSecured returns the Secured field value if set, zero value otherwise.
func (o *PipelineVariableAllOf) GetSecured() bool {
	if o == nil || o.Secured == nil {
		var ret bool
		return ret
	}
	return *o.Secured
}

// GetSecuredOk returns a tuple with the Secured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineVariableAllOf) GetSecuredOk() (*bool, bool) {
	if o == nil || o.Secured == nil {
		return nil, false
	}
	return o.Secured, true
}

// HasSecured returns a boolean if a field has been set.
func (o *PipelineVariableAllOf) HasSecured() bool {
	if o != nil && o.Secured != nil {
		return true
	}

	return false
}

// SetSecured gets a reference to the given bool and assigns it to the Secured field.
func (o *PipelineVariableAllOf) SetSecured(v bool) {
	o.Secured = &v
}

func (o PipelineVariableAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Secured != nil {
		toSerialize["secured"] = o.Secured
	}
	return json.Marshal(toSerialize)
}

type NullablePipelineVariableAllOf struct {
	value *PipelineVariableAllOf
	isSet bool
}

func (v NullablePipelineVariableAllOf) Get() *PipelineVariableAllOf {
	return v.value
}

func (v *NullablePipelineVariableAllOf) Set(val *PipelineVariableAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineVariableAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineVariableAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineVariableAllOf(val *PipelineVariableAllOf) *NullablePipelineVariableAllOf {
	return &NullablePipelineVariableAllOf{value: val, isSet: true}
}

func (v NullablePipelineVariableAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineVariableAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


