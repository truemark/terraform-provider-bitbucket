/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// BranchingModelSettingsProduction struct for BranchingModelSettingsProduction
type BranchingModelSettingsProduction struct {
	// Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.
	IsValid *bool `json:"is_valid,omitempty"`
	// The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.
	Name *string `json:"name,omitempty"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.
	UseMainbranch *bool `json:"use_mainbranch,omitempty"`
	// Indicates if branch is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewBranchingModelSettingsProduction instantiates a new BranchingModelSettingsProduction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranchingModelSettingsProduction() *BranchingModelSettingsProduction {
	this := BranchingModelSettingsProduction{}
	return &this
}

// NewBranchingModelSettingsProductionWithDefaults instantiates a new BranchingModelSettingsProduction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchingModelSettingsProductionWithDefaults() *BranchingModelSettingsProduction {
	this := BranchingModelSettingsProduction{}
	return &this
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *BranchingModelSettingsProduction) GetIsValid() bool {
	if o == nil || o.IsValid == nil {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchingModelSettingsProduction) GetIsValidOk() (*bool, bool) {
	if o == nil || o.IsValid == nil {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *BranchingModelSettingsProduction) HasIsValid() bool {
	if o != nil && o.IsValid != nil {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *BranchingModelSettingsProduction) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BranchingModelSettingsProduction) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchingModelSettingsProduction) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BranchingModelSettingsProduction) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BranchingModelSettingsProduction) SetName(v string) {
	o.Name = &v
}

// GetUseMainbranch returns the UseMainbranch field value if set, zero value otherwise.
func (o *BranchingModelSettingsProduction) GetUseMainbranch() bool {
	if o == nil || o.UseMainbranch == nil {
		var ret bool
		return ret
	}
	return *o.UseMainbranch
}

// GetUseMainbranchOk returns a tuple with the UseMainbranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchingModelSettingsProduction) GetUseMainbranchOk() (*bool, bool) {
	if o == nil || o.UseMainbranch == nil {
		return nil, false
	}
	return o.UseMainbranch, true
}

// HasUseMainbranch returns a boolean if a field has been set.
func (o *BranchingModelSettingsProduction) HasUseMainbranch() bool {
	if o != nil && o.UseMainbranch != nil {
		return true
	}

	return false
}

// SetUseMainbranch gets a reference to the given bool and assigns it to the UseMainbranch field.
func (o *BranchingModelSettingsProduction) SetUseMainbranch(v bool) {
	o.UseMainbranch = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *BranchingModelSettingsProduction) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchingModelSettingsProduction) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *BranchingModelSettingsProduction) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *BranchingModelSettingsProduction) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o BranchingModelSettingsProduction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsValid != nil {
		toSerialize["is_valid"] = o.IsValid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.UseMainbranch != nil {
		toSerialize["use_mainbranch"] = o.UseMainbranch
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableBranchingModelSettingsProduction struct {
	value *BranchingModelSettingsProduction
	isSet bool
}

func (v NullableBranchingModelSettingsProduction) Get() *BranchingModelSettingsProduction {
	return v.value
}

func (v *NullableBranchingModelSettingsProduction) Set(val *BranchingModelSettingsProduction) {
	v.value = val
	v.isSet = true
}

func (v NullableBranchingModelSettingsProduction) IsSet() bool {
	return v.isSet
}

func (v *NullableBranchingModelSettingsProduction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranchingModelSettingsProduction(val *BranchingModelSettingsProduction) *NullableBranchingModelSettingsProduction {
	return &NullableBranchingModelSettingsProduction{value: val, isSet: true}
}

func (v NullableBranchingModelSettingsProduction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranchingModelSettingsProduction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


