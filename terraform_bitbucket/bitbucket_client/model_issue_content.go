/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// IssueContent struct for IssueContent
type IssueContent struct {
	// The text as it was typed by a user.
	Raw *string `json:"raw,omitempty"`
	// The type of markup language the raw content is to be interpreted in.
	Markup *string `json:"markup,omitempty"`
	// The user's content rendered as HTML.
	Html *string `json:"html,omitempty"`
}

// NewIssueContent instantiates a new IssueContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueContent() *IssueContent {
	this := IssueContent{}
	return &this
}

// NewIssueContentWithDefaults instantiates a new IssueContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueContentWithDefaults() *IssueContent {
	this := IssueContent{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *IssueContent) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueContent) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *IssueContent) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *IssueContent) SetRaw(v string) {
	o.Raw = &v
}

// GetMarkup returns the Markup field value if set, zero value otherwise.
func (o *IssueContent) GetMarkup() string {
	if o == nil || o.Markup == nil {
		var ret string
		return ret
	}
	return *o.Markup
}

// GetMarkupOk returns a tuple with the Markup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueContent) GetMarkupOk() (*string, bool) {
	if o == nil || o.Markup == nil {
		return nil, false
	}
	return o.Markup, true
}

// HasMarkup returns a boolean if a field has been set.
func (o *IssueContent) HasMarkup() bool {
	if o != nil && o.Markup != nil {
		return true
	}

	return false
}

// SetMarkup gets a reference to the given string and assigns it to the Markup field.
func (o *IssueContent) SetMarkup(v string) {
	o.Markup = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *IssueContent) GetHtml() string {
	if o == nil || o.Html == nil {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueContent) GetHtmlOk() (*string, bool) {
	if o == nil || o.Html == nil {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *IssueContent) HasHtml() bool {
	if o != nil && o.Html != nil {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *IssueContent) SetHtml(v string) {
	o.Html = &v
}

func (o IssueContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	if o.Markup != nil {
		toSerialize["markup"] = o.Markup
	}
	if o.Html != nil {
		toSerialize["html"] = o.Html
	}
	return json.Marshal(toSerialize)
}

type NullableIssueContent struct {
	value *IssueContent
	isSet bool
}

func (v NullableIssueContent) Get() *IssueContent {
	return v.value
}

func (v *NullableIssueContent) Set(val *IssueContent) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueContent) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueContent(val *IssueContent) *NullableIssueContent {
	return &NullableIssueContent{value: val, isSet: true}
}

func (v NullableIssueContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


