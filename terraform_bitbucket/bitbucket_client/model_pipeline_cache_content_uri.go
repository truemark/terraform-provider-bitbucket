/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// PipelineCacheContentUri A representation of the location of pipeline cache content.
type PipelineCacheContentUri struct {
	// The uri for pipeline cache content.
	Uri *string `json:"uri,omitempty"`
}

// NewPipelineCacheContentUri instantiates a new PipelineCacheContentUri object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineCacheContentUri() *PipelineCacheContentUri {
	this := PipelineCacheContentUri{}
	return &this
}

// NewPipelineCacheContentUriWithDefaults instantiates a new PipelineCacheContentUri object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineCacheContentUriWithDefaults() *PipelineCacheContentUri {
	this := PipelineCacheContentUri{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *PipelineCacheContentUri) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineCacheContentUri) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *PipelineCacheContentUri) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *PipelineCacheContentUri) SetUri(v string) {
	o.Uri = &v
}

func (o PipelineCacheContentUri) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	return json.Marshal(toSerialize)
}

type NullablePipelineCacheContentUri struct {
	value *PipelineCacheContentUri
	isSet bool
}

func (v NullablePipelineCacheContentUri) Get() *PipelineCacheContentUri {
	return v.value
}

func (v *NullablePipelineCacheContentUri) Set(val *PipelineCacheContentUri) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineCacheContentUri) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineCacheContentUri) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineCacheContentUri(val *PipelineCacheContentUri) *NullablePipelineCacheContentUri {
	return &NullablePipelineCacheContentUri{value: val, isSet: true}
}

func (v NullablePipelineCacheContentUri) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineCacheContentUri) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


