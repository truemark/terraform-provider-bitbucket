/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
	"time"
)

// IssueChange An issue change.
type IssueChange struct {
	Type string `json:"type"`
	Links *IssueChangeLinks `json:"links,omitempty"`
	Name *string `json:"name,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	User *User `json:"user,omitempty"`
	Issue *Issue `json:"issue,omitempty"`
	Changes *IssueChangeChanges `json:"changes,omitempty"`
	Message *IssueContent `json:"message,omitempty"`
}

// NewIssueChange instantiates a new IssueChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueChange(type_ string) *IssueChange {
	this := IssueChange{}
	this.Type = type_
	return &this
}

// NewIssueChangeWithDefaults instantiates a new IssueChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueChangeWithDefaults() *IssueChange {
	this := IssueChange{}
	return &this
}

// GetType returns the Type field value
func (o *IssueChange) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IssueChange) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IssueChange) SetType(v string) {
	o.Type = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *IssueChange) GetLinks() IssueChangeLinks {
	if o == nil || o.Links == nil {
		var ret IssueChangeLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChange) GetLinksOk() (*IssueChangeLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *IssueChange) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given IssueChangeLinks and assigns it to the Links field.
func (o *IssueChange) SetLinks(v IssueChangeLinks) {
	o.Links = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueChange) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChange) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueChange) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueChange) SetName(v string) {
	o.Name = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *IssueChange) GetCreatedOn() time.Time {
	if o == nil || o.CreatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChange) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || o.CreatedOn == nil {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *IssueChange) HasCreatedOn() bool {
	if o != nil && o.CreatedOn != nil {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *IssueChange) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *IssueChange) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChange) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *IssueChange) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *IssueChange) SetUser(v User) {
	o.User = &v
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *IssueChange) GetIssue() Issue {
	if o == nil || o.Issue == nil {
		var ret Issue
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChange) GetIssueOk() (*Issue, bool) {
	if o == nil || o.Issue == nil {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *IssueChange) HasIssue() bool {
	if o != nil && o.Issue != nil {
		return true
	}

	return false
}

// SetIssue gets a reference to the given Issue and assigns it to the Issue field.
func (o *IssueChange) SetIssue(v Issue) {
	o.Issue = &v
}

// GetChanges returns the Changes field value if set, zero value otherwise.
func (o *IssueChange) GetChanges() IssueChangeChanges {
	if o == nil || o.Changes == nil {
		var ret IssueChangeChanges
		return ret
	}
	return *o.Changes
}

// GetChangesOk returns a tuple with the Changes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChange) GetChangesOk() (*IssueChangeChanges, bool) {
	if o == nil || o.Changes == nil {
		return nil, false
	}
	return o.Changes, true
}

// HasChanges returns a boolean if a field has been set.
func (o *IssueChange) HasChanges() bool {
	if o != nil && o.Changes != nil {
		return true
	}

	return false
}

// SetChanges gets a reference to the given IssueChangeChanges and assigns it to the Changes field.
func (o *IssueChange) SetChanges(v IssueChangeChanges) {
	o.Changes = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IssueChange) GetMessage() IssueContent {
	if o == nil || o.Message == nil {
		var ret IssueContent
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChange) GetMessageOk() (*IssueContent, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IssueChange) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given IssueContent and assigns it to the Message field.
func (o *IssueChange) SetMessage(v IssueContent) {
	o.Message = &v
}

func (o IssueChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CreatedOn != nil {
		toSerialize["created_on"] = o.CreatedOn
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Issue != nil {
		toSerialize["issue"] = o.Issue
	}
	if o.Changes != nil {
		toSerialize["changes"] = o.Changes
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableIssueChange struct {
	value *IssueChange
	isSet bool
}

func (v NullableIssueChange) Get() *IssueChange {
	return v.value
}

func (v *NullableIssueChange) Set(val *IssueChange) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueChange) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueChange(val *IssueChange) *NullableIssueChange {
	return &NullableIssueChange{value: val, isSet: true}
}

func (v NullableIssueChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


