/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// HookEvent An event, associated with a resource or subject type.
type HookEvent struct {
	// The event identifier.
	Event *string `json:"event,omitempty"`
	// The category this event belongs to.
	Category *string `json:"category,omitempty"`
	// Summary of the webhook event type.
	Label *string `json:"label,omitempty"`
	// More detailed description of the webhook event type.
	Description *string `json:"description,omitempty"`
}

// NewHookEvent instantiates a new HookEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHookEvent() *HookEvent {
	this := HookEvent{}
	return &this
}

// NewHookEventWithDefaults instantiates a new HookEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHookEventWithDefaults() *HookEvent {
	this := HookEvent{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *HookEvent) GetEvent() string {
	if o == nil || o.Event == nil {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookEvent) GetEventOk() (*string, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *HookEvent) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *HookEvent) SetEvent(v string) {
	o.Event = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *HookEvent) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookEvent) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *HookEvent) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *HookEvent) SetCategory(v string) {
	o.Category = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *HookEvent) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookEvent) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *HookEvent) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *HookEvent) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HookEvent) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HookEvent) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HookEvent) SetDescription(v string) {
	o.Description = &v
}

func (o HookEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableHookEvent struct {
	value *HookEvent
	isSet bool
}

func (v NullableHookEvent) Get() *HookEvent {
	return v.value
}

func (v *NullableHookEvent) Set(val *HookEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableHookEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableHookEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHookEvent(val *HookEvent) *NullableHookEvent {
	return &NullableHookEvent{value: val, isSet: true}
}

func (v NullableHookEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHookEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


