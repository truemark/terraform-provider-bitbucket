/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// RefLinks struct for RefLinks
type RefLinks struct {
	Self *Link `json:"self,omitempty"`
	Commits *Link `json:"commits,omitempty"`
	Html *Link `json:"html,omitempty"`
}

// NewRefLinks instantiates a new RefLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefLinks() *RefLinks {
	this := RefLinks{}
	return &this
}

// NewRefLinksWithDefaults instantiates a new RefLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefLinksWithDefaults() *RefLinks {
	this := RefLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *RefLinks) GetSelf() Link {
	if o == nil || o.Self == nil {
		var ret Link
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefLinks) GetSelfOk() (*Link, bool) {
	if o == nil || o.Self == nil {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *RefLinks) HasSelf() bool {
	if o != nil && o.Self != nil {
		return true
	}

	return false
}

// SetSelf gets a reference to the given Link and assigns it to the Self field.
func (o *RefLinks) SetSelf(v Link) {
	o.Self = &v
}

// GetCommits returns the Commits field value if set, zero value otherwise.
func (o *RefLinks) GetCommits() Link {
	if o == nil || o.Commits == nil {
		var ret Link
		return ret
	}
	return *o.Commits
}

// GetCommitsOk returns a tuple with the Commits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefLinks) GetCommitsOk() (*Link, bool) {
	if o == nil || o.Commits == nil {
		return nil, false
	}
	return o.Commits, true
}

// HasCommits returns a boolean if a field has been set.
func (o *RefLinks) HasCommits() bool {
	if o != nil && o.Commits != nil {
		return true
	}

	return false
}

// SetCommits gets a reference to the given Link and assigns it to the Commits field.
func (o *RefLinks) SetCommits(v Link) {
	o.Commits = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *RefLinks) GetHtml() Link {
	if o == nil || o.Html == nil {
		var ret Link
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefLinks) GetHtmlOk() (*Link, bool) {
	if o == nil || o.Html == nil {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *RefLinks) HasHtml() bool {
	if o != nil && o.Html != nil {
		return true
	}

	return false
}

// SetHtml gets a reference to the given Link and assigns it to the Html field.
func (o *RefLinks) SetHtml(v Link) {
	o.Html = &v
}

func (o RefLinks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Self != nil {
		toSerialize["self"] = o.Self
	}
	if o.Commits != nil {
		toSerialize["commits"] = o.Commits
	}
	if o.Html != nil {
		toSerialize["html"] = o.Html
	}
	return json.Marshal(toSerialize)
}

type NullableRefLinks struct {
	value *RefLinks
	isSet bool
}

func (v NullableRefLinks) Get() *RefLinks {
	return v.value
}

func (v *NullableRefLinks) Set(val *RefLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableRefLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableRefLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefLinks(val *RefLinks) *NullableRefLinks {
	return &NullableRefLinks{value: val, isSet: true}
}

func (v NullableRefLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


