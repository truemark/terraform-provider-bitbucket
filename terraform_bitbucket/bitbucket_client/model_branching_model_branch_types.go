/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// BranchingModelBranchTypes struct for BranchingModelBranchTypes
type BranchingModelBranchTypes struct {
	// The kind of branch.
	Kind string `json:"kind"`
	// The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.
	Prefix string `json:"prefix"`
}

// NewBranchingModelBranchTypes instantiates a new BranchingModelBranchTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranchingModelBranchTypes(kind string, prefix string) *BranchingModelBranchTypes {
	this := BranchingModelBranchTypes{}
	this.Kind = kind
	this.Prefix = prefix
	return &this
}

// NewBranchingModelBranchTypesWithDefaults instantiates a new BranchingModelBranchTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchingModelBranchTypesWithDefaults() *BranchingModelBranchTypes {
	this := BranchingModelBranchTypes{}
	return &this
}

// GetKind returns the Kind field value
func (o *BranchingModelBranchTypes) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *BranchingModelBranchTypes) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *BranchingModelBranchTypes) SetKind(v string) {
	o.Kind = v
}

// GetPrefix returns the Prefix field value
func (o *BranchingModelBranchTypes) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *BranchingModelBranchTypes) GetPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *BranchingModelBranchTypes) SetPrefix(v string) {
	o.Prefix = v
}

func (o BranchingModelBranchTypes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableBranchingModelBranchTypes struct {
	value *BranchingModelBranchTypes
	isSet bool
}

func (v NullableBranchingModelBranchTypes) Get() *BranchingModelBranchTypes {
	return v.value
}

func (v *NullableBranchingModelBranchTypes) Set(val *BranchingModelBranchTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableBranchingModelBranchTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableBranchingModelBranchTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranchingModelBranchTypes(val *BranchingModelBranchTypes) *NullableBranchingModelBranchTypes {
	return &NullableBranchingModelBranchTypes{value: val, isSet: true}
}

func (v NullableBranchingModelBranchTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranchingModelBranchTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


