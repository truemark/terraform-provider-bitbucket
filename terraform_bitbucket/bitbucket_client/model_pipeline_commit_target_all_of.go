/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// PipelineCommitTargetAllOf A Bitbucket Pipelines commit target.
type PipelineCommitTargetAllOf struct {
	Commit *Commit `json:"commit,omitempty"`
	Selector *PipelineSelector `json:"selector,omitempty"`
}

// NewPipelineCommitTargetAllOf instantiates a new PipelineCommitTargetAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineCommitTargetAllOf() *PipelineCommitTargetAllOf {
	this := PipelineCommitTargetAllOf{}
	return &this
}

// NewPipelineCommitTargetAllOfWithDefaults instantiates a new PipelineCommitTargetAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineCommitTargetAllOfWithDefaults() *PipelineCommitTargetAllOf {
	this := PipelineCommitTargetAllOf{}
	return &this
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *PipelineCommitTargetAllOf) GetCommit() Commit {
	if o == nil || o.Commit == nil {
		var ret Commit
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineCommitTargetAllOf) GetCommitOk() (*Commit, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *PipelineCommitTargetAllOf) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given Commit and assigns it to the Commit field.
func (o *PipelineCommitTargetAllOf) SetCommit(v Commit) {
	o.Commit = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *PipelineCommitTargetAllOf) GetSelector() PipelineSelector {
	if o == nil || o.Selector == nil {
		var ret PipelineSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineCommitTargetAllOf) GetSelectorOk() (*PipelineSelector, bool) {
	if o == nil || o.Selector == nil {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *PipelineCommitTargetAllOf) HasSelector() bool {
	if o != nil && o.Selector != nil {
		return true
	}

	return false
}

// SetSelector gets a reference to the given PipelineSelector and assigns it to the Selector field.
func (o *PipelineCommitTargetAllOf) SetSelector(v PipelineSelector) {
	o.Selector = &v
}

func (o PipelineCommitTargetAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.Selector != nil {
		toSerialize["selector"] = o.Selector
	}
	return json.Marshal(toSerialize)
}

type NullablePipelineCommitTargetAllOf struct {
	value *PipelineCommitTargetAllOf
	isSet bool
}

func (v NullablePipelineCommitTargetAllOf) Get() *PipelineCommitTargetAllOf {
	return v.value
}

func (v *NullablePipelineCommitTargetAllOf) Set(val *PipelineCommitTargetAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineCommitTargetAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineCommitTargetAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineCommitTargetAllOf(val *PipelineCommitTargetAllOf) *NullablePipelineCommitTargetAllOf {
	return &NullablePipelineCommitTargetAllOf{value: val, isSet: true}
}

func (v NullablePipelineCommitTargetAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineCommitTargetAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


