/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// SubjectTypes The mapping of resource/subject types pointing to their individual event types.
type SubjectTypes struct {
	Repository *SubjectTypesRepository `json:"repository,omitempty"`
	User *SubjectTypesRepository `json:"user,omitempty"`
	Team *SubjectTypesRepository `json:"team,omitempty"`
}

// NewSubjectTypes instantiates a new SubjectTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectTypes() *SubjectTypes {
	this := SubjectTypes{}
	return &this
}

// NewSubjectTypesWithDefaults instantiates a new SubjectTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectTypesWithDefaults() *SubjectTypes {
	this := SubjectTypes{}
	return &this
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *SubjectTypes) GetRepository() SubjectTypesRepository {
	if o == nil || o.Repository == nil {
		var ret SubjectTypesRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectTypes) GetRepositoryOk() (*SubjectTypesRepository, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *SubjectTypes) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given SubjectTypesRepository and assigns it to the Repository field.
func (o *SubjectTypes) SetRepository(v SubjectTypesRepository) {
	o.Repository = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SubjectTypes) GetUser() SubjectTypesRepository {
	if o == nil || o.User == nil {
		var ret SubjectTypesRepository
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectTypes) GetUserOk() (*SubjectTypesRepository, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SubjectTypes) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given SubjectTypesRepository and assigns it to the User field.
func (o *SubjectTypes) SetUser(v SubjectTypesRepository) {
	o.User = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *SubjectTypes) GetTeam() SubjectTypesRepository {
	if o == nil || o.Team == nil {
		var ret SubjectTypesRepository
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectTypes) GetTeamOk() (*SubjectTypesRepository, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *SubjectTypes) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given SubjectTypesRepository and assigns it to the Team field.
func (o *SubjectTypes) SetTeam(v SubjectTypesRepository) {
	o.Team = &v
}

func (o SubjectTypes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Team != nil {
		toSerialize["team"] = o.Team
	}
	return json.Marshal(toSerialize)
}

type NullableSubjectTypes struct {
	value *SubjectTypes
	isSet bool
}

func (v NullableSubjectTypes) Get() *SubjectTypes {
	return v.value
}

func (v *NullableSubjectTypes) Set(val *SubjectTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectTypes(val *SubjectTypes) *NullableSubjectTypes {
	return &NullableSubjectTypes{value: val, isSet: true}
}

func (v NullableSubjectTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


