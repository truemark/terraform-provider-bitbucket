/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// SearchCodeSearchResult struct for SearchCodeSearchResult
type SearchCodeSearchResult struct {
	Type *string `json:"type,omitempty"`
	ContentMatchCount *int64 `json:"content_match_count,omitempty"`
	ContentMatches *[]SearchContentMatch `json:"content_matches,omitempty"`
	PathMatches *[]SearchSegment `json:"path_matches,omitempty"`
	File *CommitFile `json:"file,omitempty"`
}

// NewSearchCodeSearchResult instantiates a new SearchCodeSearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCodeSearchResult() *SearchCodeSearchResult {
	this := SearchCodeSearchResult{}
	return &this
}

// NewSearchCodeSearchResultWithDefaults instantiates a new SearchCodeSearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCodeSearchResultWithDefaults() *SearchCodeSearchResult {
	this := SearchCodeSearchResult{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchCodeSearchResult) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCodeSearchResult) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchCodeSearchResult) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchCodeSearchResult) SetType(v string) {
	o.Type = &v
}

// GetContentMatchCount returns the ContentMatchCount field value if set, zero value otherwise.
func (o *SearchCodeSearchResult) GetContentMatchCount() int64 {
	if o == nil || o.ContentMatchCount == nil {
		var ret int64
		return ret
	}
	return *o.ContentMatchCount
}

// GetContentMatchCountOk returns a tuple with the ContentMatchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCodeSearchResult) GetContentMatchCountOk() (*int64, bool) {
	if o == nil || o.ContentMatchCount == nil {
		return nil, false
	}
	return o.ContentMatchCount, true
}

// HasContentMatchCount returns a boolean if a field has been set.
func (o *SearchCodeSearchResult) HasContentMatchCount() bool {
	if o != nil && o.ContentMatchCount != nil {
		return true
	}

	return false
}

// SetContentMatchCount gets a reference to the given int64 and assigns it to the ContentMatchCount field.
func (o *SearchCodeSearchResult) SetContentMatchCount(v int64) {
	o.ContentMatchCount = &v
}

// GetContentMatches returns the ContentMatches field value if set, zero value otherwise.
func (o *SearchCodeSearchResult) GetContentMatches() []SearchContentMatch {
	if o == nil || o.ContentMatches == nil {
		var ret []SearchContentMatch
		return ret
	}
	return *o.ContentMatches
}

// GetContentMatchesOk returns a tuple with the ContentMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCodeSearchResult) GetContentMatchesOk() (*[]SearchContentMatch, bool) {
	if o == nil || o.ContentMatches == nil {
		return nil, false
	}
	return o.ContentMatches, true
}

// HasContentMatches returns a boolean if a field has been set.
func (o *SearchCodeSearchResult) HasContentMatches() bool {
	if o != nil && o.ContentMatches != nil {
		return true
	}

	return false
}

// SetContentMatches gets a reference to the given []SearchContentMatch and assigns it to the ContentMatches field.
func (o *SearchCodeSearchResult) SetContentMatches(v []SearchContentMatch) {
	o.ContentMatches = &v
}

// GetPathMatches returns the PathMatches field value if set, zero value otherwise.
func (o *SearchCodeSearchResult) GetPathMatches() []SearchSegment {
	if o == nil || o.PathMatches == nil {
		var ret []SearchSegment
		return ret
	}
	return *o.PathMatches
}

// GetPathMatchesOk returns a tuple with the PathMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCodeSearchResult) GetPathMatchesOk() (*[]SearchSegment, bool) {
	if o == nil || o.PathMatches == nil {
		return nil, false
	}
	return o.PathMatches, true
}

// HasPathMatches returns a boolean if a field has been set.
func (o *SearchCodeSearchResult) HasPathMatches() bool {
	if o != nil && o.PathMatches != nil {
		return true
	}

	return false
}

// SetPathMatches gets a reference to the given []SearchSegment and assigns it to the PathMatches field.
func (o *SearchCodeSearchResult) SetPathMatches(v []SearchSegment) {
	o.PathMatches = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *SearchCodeSearchResult) GetFile() CommitFile {
	if o == nil || o.File == nil {
		var ret CommitFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCodeSearchResult) GetFileOk() (*CommitFile, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *SearchCodeSearchResult) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given CommitFile and assigns it to the File field.
func (o *SearchCodeSearchResult) SetFile(v CommitFile) {
	o.File = &v
}

func (o SearchCodeSearchResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ContentMatchCount != nil {
		toSerialize["content_match_count"] = o.ContentMatchCount
	}
	if o.ContentMatches != nil {
		toSerialize["content_matches"] = o.ContentMatches
	}
	if o.PathMatches != nil {
		toSerialize["path_matches"] = o.PathMatches
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	return json.Marshal(toSerialize)
}

type NullableSearchCodeSearchResult struct {
	value *SearchCodeSearchResult
	isSet bool
}

func (v NullableSearchCodeSearchResult) Get() *SearchCodeSearchResult {
	return v.value
}

func (v *NullableSearchCodeSearchResult) Set(val *SearchCodeSearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCodeSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCodeSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCodeSearchResult(val *SearchCodeSearchResult) *NullableSearchCodeSearchResult {
	return &NullableSearchCodeSearchResult{value: val, isSet: true}
}

func (v NullableSearchCodeSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCodeSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


