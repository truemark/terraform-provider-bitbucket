/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// IssueChangeChangesAssignee struct for IssueChangeChangesAssignee
type IssueChangeChangesAssignee struct {
	Old *string `json:"old,omitempty"`
	New *string `json:"new,omitempty"`
}

// NewIssueChangeChangesAssignee instantiates a new IssueChangeChangesAssignee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueChangeChangesAssignee() *IssueChangeChangesAssignee {
	this := IssueChangeChangesAssignee{}
	return &this
}

// NewIssueChangeChangesAssigneeWithDefaults instantiates a new IssueChangeChangesAssignee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueChangeChangesAssigneeWithDefaults() *IssueChangeChangesAssignee {
	this := IssueChangeChangesAssignee{}
	return &this
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *IssueChangeChangesAssignee) GetOld() string {
	if o == nil || o.Old == nil {
		var ret string
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChangesAssignee) GetOldOk() (*string, bool) {
	if o == nil || o.Old == nil {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *IssueChangeChangesAssignee) HasOld() bool {
	if o != nil && o.Old != nil {
		return true
	}

	return false
}

// SetOld gets a reference to the given string and assigns it to the Old field.
func (o *IssueChangeChangesAssignee) SetOld(v string) {
	o.Old = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *IssueChangeChangesAssignee) GetNew() string {
	if o == nil || o.New == nil {
		var ret string
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChangesAssignee) GetNewOk() (*string, bool) {
	if o == nil || o.New == nil {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *IssueChangeChangesAssignee) HasNew() bool {
	if o != nil && o.New != nil {
		return true
	}

	return false
}

// SetNew gets a reference to the given string and assigns it to the New field.
func (o *IssueChangeChangesAssignee) SetNew(v string) {
	o.New = &v
}

func (o IssueChangeChangesAssignee) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Old != nil {
		toSerialize["old"] = o.Old
	}
	if o.New != nil {
		toSerialize["new"] = o.New
	}
	return json.Marshal(toSerialize)
}

type NullableIssueChangeChangesAssignee struct {
	value *IssueChangeChangesAssignee
	isSet bool
}

func (v NullableIssueChangeChangesAssignee) Get() *IssueChangeChangesAssignee {
	return v.value
}

func (v *NullableIssueChangeChangesAssignee) Set(val *IssueChangeChangesAssignee) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueChangeChangesAssignee) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueChangeChangesAssignee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueChangeChangesAssignee(val *IssueChangeChangesAssignee) *NullableIssueChangeChangesAssignee {
	return &NullableIssueChangeChangesAssignee{value: val, isSet: true}
}

func (v NullableIssueChangeChangesAssignee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueChangeChangesAssignee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


