/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// IssueChangeChanges struct for IssueChangeChanges
type IssueChangeChanges struct {
	Assignee *IssueChangeChangesAssignee `json:"assignee,omitempty"`
	State *IssueChangeChangesAssignee `json:"state,omitempty"`
	Title *IssueChangeChangesAssignee `json:"title,omitempty"`
	Kind *IssueChangeChangesAssignee `json:"kind,omitempty"`
	Milestone *IssueChangeChangesAssignee `json:"milestone,omitempty"`
	Component *IssueChangeChangesAssignee `json:"component,omitempty"`
	Priority *IssueChangeChangesAssignee `json:"priority,omitempty"`
	Version *IssueChangeChangesAssignee `json:"version,omitempty"`
	Content *IssueChangeChangesAssignee `json:"content,omitempty"`
}

// NewIssueChangeChanges instantiates a new IssueChangeChanges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueChangeChanges() *IssueChangeChanges {
	this := IssueChangeChanges{}
	return &this
}

// NewIssueChangeChangesWithDefaults instantiates a new IssueChangeChanges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueChangeChangesWithDefaults() *IssueChangeChanges {
	this := IssueChangeChanges{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetAssignee() IssueChangeChangesAssignee {
	if o == nil || o.Assignee == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetAssigneeOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Assignee == nil {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasAssignee() bool {
	if o != nil && o.Assignee != nil {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given IssueChangeChangesAssignee and assigns it to the Assignee field.
func (o *IssueChangeChanges) SetAssignee(v IssueChangeChangesAssignee) {
	o.Assignee = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetState() IssueChangeChangesAssignee {
	if o == nil || o.State == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetStateOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given IssueChangeChangesAssignee and assigns it to the State field.
func (o *IssueChangeChanges) SetState(v IssueChangeChangesAssignee) {
	o.State = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetTitle() IssueChangeChangesAssignee {
	if o == nil || o.Title == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetTitleOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given IssueChangeChangesAssignee and assigns it to the Title field.
func (o *IssueChangeChanges) SetTitle(v IssueChangeChangesAssignee) {
	o.Title = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetKind() IssueChangeChangesAssignee {
	if o == nil || o.Kind == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetKindOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given IssueChangeChangesAssignee and assigns it to the Kind field.
func (o *IssueChangeChanges) SetKind(v IssueChangeChangesAssignee) {
	o.Kind = &v
}

// GetMilestone returns the Milestone field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetMilestone() IssueChangeChangesAssignee {
	if o == nil || o.Milestone == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Milestone
}

// GetMilestoneOk returns a tuple with the Milestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetMilestoneOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Milestone == nil {
		return nil, false
	}
	return o.Milestone, true
}

// HasMilestone returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasMilestone() bool {
	if o != nil && o.Milestone != nil {
		return true
	}

	return false
}

// SetMilestone gets a reference to the given IssueChangeChangesAssignee and assigns it to the Milestone field.
func (o *IssueChangeChanges) SetMilestone(v IssueChangeChangesAssignee) {
	o.Milestone = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetComponent() IssueChangeChangesAssignee {
	if o == nil || o.Component == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetComponentOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Component == nil {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasComponent() bool {
	if o != nil && o.Component != nil {
		return true
	}

	return false
}

// SetComponent gets a reference to the given IssueChangeChangesAssignee and assigns it to the Component field.
func (o *IssueChangeChanges) SetComponent(v IssueChangeChangesAssignee) {
	o.Component = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetPriority() IssueChangeChangesAssignee {
	if o == nil || o.Priority == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetPriorityOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given IssueChangeChangesAssignee and assigns it to the Priority field.
func (o *IssueChangeChanges) SetPriority(v IssueChangeChangesAssignee) {
	o.Priority = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetVersion() IssueChangeChangesAssignee {
	if o == nil || o.Version == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetVersionOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given IssueChangeChangesAssignee and assigns it to the Version field.
func (o *IssueChangeChanges) SetVersion(v IssueChangeChangesAssignee) {
	o.Version = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *IssueChangeChanges) GetContent() IssueChangeChangesAssignee {
	if o == nil || o.Content == nil {
		var ret IssueChangeChangesAssignee
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueChangeChanges) GetContentOk() (*IssueChangeChangesAssignee, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *IssueChangeChanges) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given IssueChangeChangesAssignee and assigns it to the Content field.
func (o *IssueChangeChanges) SetContent(v IssueChangeChangesAssignee) {
	o.Content = &v
}

func (o IssueChangeChanges) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assignee != nil {
		toSerialize["assignee"] = o.Assignee
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Milestone != nil {
		toSerialize["milestone"] = o.Milestone
	}
	if o.Component != nil {
		toSerialize["component"] = o.Component
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableIssueChangeChanges struct {
	value *IssueChangeChanges
	isSet bool
}

func (v NullableIssueChangeChanges) Get() *IssueChangeChanges {
	return v.value
}

func (v *NullableIssueChangeChanges) Set(val *IssueChangeChanges) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueChangeChanges) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueChangeChanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueChangeChanges(val *IssueChangeChanges) *NullableIssueChangeChanges {
	return &NullableIssueChangeChanges{value: val, isSet: true}
}

func (v NullableIssueChangeChanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueChangeChanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


