/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
	"time"
)

// Tag A tag object, representing a tag in a repository.
type Tag struct {
	// The message associated with the tag, if available.
	Message *string `json:"message,omitempty"`
	// The date that the tag was created, if available
	Date *time.Time `json:"date,omitempty"`
	Tagger *Author `json:"tagger,omitempty"`
}

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag() *Tag {
	this := Tag{}
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Tag) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Tag) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Tag) SetMessage(v string) {
	o.Message = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Tag) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Tag) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *Tag) SetDate(v time.Time) {
	o.Date = &v
}

// GetTagger returns the Tagger field value if set, zero value otherwise.
func (o *Tag) GetTagger() Author {
	if o == nil || o.Tagger == nil {
		var ret Author
		return ret
	}
	return *o.Tagger
}

// GetTaggerOk returns a tuple with the Tagger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetTaggerOk() (*Author, bool) {
	if o == nil || o.Tagger == nil {
		return nil, false
	}
	return o.Tagger, true
}

// HasTagger returns a boolean if a field has been set.
func (o *Tag) HasTagger() bool {
	if o != nil && o.Tagger != nil {
		return true
	}

	return false
}

// SetTagger gets a reference to the given Author and assigns it to the Tagger field.
func (o *Tag) SetTagger(v Author) {
	o.Tagger = &v
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Tagger != nil {
		toSerialize["tagger"] = o.Tagger
	}
	return json.Marshal(toSerialize)
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


