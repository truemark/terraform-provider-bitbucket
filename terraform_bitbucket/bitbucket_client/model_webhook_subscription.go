/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
	"time"
)

// WebhookSubscription A Webhook subscription.
type WebhookSubscription struct {
	// The webhook's id
	Uuid *string `json:"uuid,omitempty"`
	// The URL events get delivered to.
	Url *string `json:"url,omitempty"`
	// A user-defined description of the webhook.
	Description *string `json:"description,omitempty"`
	// The type of entity, which is `repository` in the case of webhook subscriptions on repositories.
	SubjectType *string `json:"subject_type,omitempty"`
	Subject *Object `json:"subject,omitempty"`
	Active *bool `json:"active,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The events this webhook is subscribed to.
	Events *[]string `json:"events,omitempty"`
}

// NewWebhookSubscription instantiates a new WebhookSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookSubscription() *WebhookSubscription {
	this := WebhookSubscription{}
	return &this
}

// NewWebhookSubscriptionWithDefaults instantiates a new WebhookSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookSubscriptionWithDefaults() *WebhookSubscription {
	this := WebhookSubscription{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *WebhookSubscription) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *WebhookSubscription) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *WebhookSubscription) SetUuid(v string) {
	o.Uuid = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *WebhookSubscription) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *WebhookSubscription) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *WebhookSubscription) SetUrl(v string) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WebhookSubscription) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WebhookSubscription) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WebhookSubscription) SetDescription(v string) {
	o.Description = &v
}

// GetSubjectType returns the SubjectType field value if set, zero value otherwise.
func (o *WebhookSubscription) GetSubjectType() string {
	if o == nil || o.SubjectType == nil {
		var ret string
		return ret
	}
	return *o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetSubjectTypeOk() (*string, bool) {
	if o == nil || o.SubjectType == nil {
		return nil, false
	}
	return o.SubjectType, true
}

// HasSubjectType returns a boolean if a field has been set.
func (o *WebhookSubscription) HasSubjectType() bool {
	if o != nil && o.SubjectType != nil {
		return true
	}

	return false
}

// SetSubjectType gets a reference to the given string and assigns it to the SubjectType field.
func (o *WebhookSubscription) SetSubjectType(v string) {
	o.SubjectType = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *WebhookSubscription) GetSubject() Object {
	if o == nil || o.Subject == nil {
		var ret Object
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetSubjectOk() (*Object, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *WebhookSubscription) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given Object and assigns it to the Subject field.
func (o *WebhookSubscription) SetSubject(v Object) {
	o.Subject = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *WebhookSubscription) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *WebhookSubscription) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *WebhookSubscription) SetActive(v bool) {
	o.Active = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WebhookSubscription) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WebhookSubscription) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *WebhookSubscription) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *WebhookSubscription) GetEvents() []string {
	if o == nil || o.Events == nil {
		var ret []string
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookSubscription) GetEventsOk() (*[]string, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *WebhookSubscription) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *WebhookSubscription) SetEvents(v []string) {
	o.Events = &v
}

func (o WebhookSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SubjectType != nil {
		toSerialize["subject_type"] = o.SubjectType
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookSubscription struct {
	value *WebhookSubscription
	isSet bool
}

func (v NullableWebhookSubscription) Get() *WebhookSubscription {
	return v.value
}

func (v *NullableWebhookSubscription) Set(val *WebhookSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookSubscription(val *WebhookSubscription) *NullableWebhookSubscription {
	return &NullableWebhookSubscription{value: val, isSet: true}
}

func (v NullableWebhookSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


