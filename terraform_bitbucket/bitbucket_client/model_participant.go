/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
	"time"
)

// Participant Object describing a user's role on resources like commits or pull requests.
type Participant struct {
	User *User `json:"user,omitempty"`
	Role *string `json:"role,omitempty"`
	Approved *bool `json:"approved,omitempty"`
	State *string `json:"state,omitempty"`
	// The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.
	ParticipatedOn *time.Time `json:"participated_on,omitempty"`
}

// NewParticipant instantiates a new Participant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipant() *Participant {
	this := Participant{}
	return &this
}

// NewParticipantWithDefaults instantiates a new Participant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantWithDefaults() *Participant {
	this := Participant{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Participant) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Participant) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *Participant) SetUser(v User) {
	o.User = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *Participant) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *Participant) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *Participant) SetRole(v string) {
	o.Role = &v
}

// GetApproved returns the Approved field value if set, zero value otherwise.
func (o *Participant) GetApproved() bool {
	if o == nil || o.Approved == nil {
		var ret bool
		return ret
	}
	return *o.Approved
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetApprovedOk() (*bool, bool) {
	if o == nil || o.Approved == nil {
		return nil, false
	}
	return o.Approved, true
}

// HasApproved returns a boolean if a field has been set.
func (o *Participant) HasApproved() bool {
	if o != nil && o.Approved != nil {
		return true
	}

	return false
}

// SetApproved gets a reference to the given bool and assigns it to the Approved field.
func (o *Participant) SetApproved(v bool) {
	o.Approved = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Participant) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Participant) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Participant) SetState(v string) {
	o.State = &v
}

// GetParticipatedOn returns the ParticipatedOn field value if set, zero value otherwise.
func (o *Participant) GetParticipatedOn() time.Time {
	if o == nil || o.ParticipatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.ParticipatedOn
}

// GetParticipatedOnOk returns a tuple with the ParticipatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetParticipatedOnOk() (*time.Time, bool) {
	if o == nil || o.ParticipatedOn == nil {
		return nil, false
	}
	return o.ParticipatedOn, true
}

// HasParticipatedOn returns a boolean if a field has been set.
func (o *Participant) HasParticipatedOn() bool {
	if o != nil && o.ParticipatedOn != nil {
		return true
	}

	return false
}

// SetParticipatedOn gets a reference to the given time.Time and assigns it to the ParticipatedOn field.
func (o *Participant) SetParticipatedOn(v time.Time) {
	o.ParticipatedOn = &v
}

func (o Participant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Approved != nil {
		toSerialize["approved"] = o.Approved
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.ParticipatedOn != nil {
		toSerialize["participated_on"] = o.ParticipatedOn
	}
	return json.Marshal(toSerialize)
}

type NullableParticipant struct {
	value *Participant
	isSet bool
}

func (v NullableParticipant) Get() *Participant {
	return v.value
}

func (v *NullableParticipant) Set(val *Participant) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipant) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipant(val *Participant) *NullableParticipant {
	return &NullableParticipant{value: val, isSet: true}
}

func (v NullableParticipant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


