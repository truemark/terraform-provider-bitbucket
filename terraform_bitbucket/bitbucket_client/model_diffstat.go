/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// Diffstat A diffstat object that includes a summary of changes made to a file between two commits.
type Diffstat struct {
	Type string `json:"type"`
	Status *string `json:"status,omitempty"`
	LinesAdded *int32 `json:"lines_added,omitempty"`
	LinesRemoved *int32 `json:"lines_removed,omitempty"`
	Old *CommitFile `json:"old,omitempty"`
	New *CommitFile `json:"new,omitempty"`
}

// NewDiffstat instantiates a new Diffstat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffstat(type_ string) *Diffstat {
	this := Diffstat{}
	this.Type = type_
	return &this
}

// NewDiffstatWithDefaults instantiates a new Diffstat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffstatWithDefaults() *Diffstat {
	this := Diffstat{}
	return &this
}

// GetType returns the Type field value
func (o *Diffstat) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Diffstat) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Diffstat) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Diffstat) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diffstat) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Diffstat) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Diffstat) SetStatus(v string) {
	o.Status = &v
}

// GetLinesAdded returns the LinesAdded field value if set, zero value otherwise.
func (o *Diffstat) GetLinesAdded() int32 {
	if o == nil || o.LinesAdded == nil {
		var ret int32
		return ret
	}
	return *o.LinesAdded
}

// GetLinesAddedOk returns a tuple with the LinesAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diffstat) GetLinesAddedOk() (*int32, bool) {
	if o == nil || o.LinesAdded == nil {
		return nil, false
	}
	return o.LinesAdded, true
}

// HasLinesAdded returns a boolean if a field has been set.
func (o *Diffstat) HasLinesAdded() bool {
	if o != nil && o.LinesAdded != nil {
		return true
	}

	return false
}

// SetLinesAdded gets a reference to the given int32 and assigns it to the LinesAdded field.
func (o *Diffstat) SetLinesAdded(v int32) {
	o.LinesAdded = &v
}

// GetLinesRemoved returns the LinesRemoved field value if set, zero value otherwise.
func (o *Diffstat) GetLinesRemoved() int32 {
	if o == nil || o.LinesRemoved == nil {
		var ret int32
		return ret
	}
	return *o.LinesRemoved
}

// GetLinesRemovedOk returns a tuple with the LinesRemoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diffstat) GetLinesRemovedOk() (*int32, bool) {
	if o == nil || o.LinesRemoved == nil {
		return nil, false
	}
	return o.LinesRemoved, true
}

// HasLinesRemoved returns a boolean if a field has been set.
func (o *Diffstat) HasLinesRemoved() bool {
	if o != nil && o.LinesRemoved != nil {
		return true
	}

	return false
}

// SetLinesRemoved gets a reference to the given int32 and assigns it to the LinesRemoved field.
func (o *Diffstat) SetLinesRemoved(v int32) {
	o.LinesRemoved = &v
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *Diffstat) GetOld() CommitFile {
	if o == nil || o.Old == nil {
		var ret CommitFile
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diffstat) GetOldOk() (*CommitFile, bool) {
	if o == nil || o.Old == nil {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *Diffstat) HasOld() bool {
	if o != nil && o.Old != nil {
		return true
	}

	return false
}

// SetOld gets a reference to the given CommitFile and assigns it to the Old field.
func (o *Diffstat) SetOld(v CommitFile) {
	o.Old = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *Diffstat) GetNew() CommitFile {
	if o == nil || o.New == nil {
		var ret CommitFile
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diffstat) GetNewOk() (*CommitFile, bool) {
	if o == nil || o.New == nil {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *Diffstat) HasNew() bool {
	if o != nil && o.New != nil {
		return true
	}

	return false
}

// SetNew gets a reference to the given CommitFile and assigns it to the New field.
func (o *Diffstat) SetNew(v CommitFile) {
	o.New = &v
}

func (o Diffstat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.LinesAdded != nil {
		toSerialize["lines_added"] = o.LinesAdded
	}
	if o.LinesRemoved != nil {
		toSerialize["lines_removed"] = o.LinesRemoved
	}
	if o.Old != nil {
		toSerialize["old"] = o.Old
	}
	if o.New != nil {
		toSerialize["new"] = o.New
	}
	return json.Marshal(toSerialize)
}

type NullableDiffstat struct {
	value *Diffstat
	isSet bool
}

func (v NullableDiffstat) Get() *Diffstat {
	return v.value
}

func (v *NullableDiffstat) Set(val *Diffstat) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffstat) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffstat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffstat(val *Diffstat) *NullableDiffstat {
	return &NullableDiffstat{value: val, isSet: true}
}

func (v NullableDiffstat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffstat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


