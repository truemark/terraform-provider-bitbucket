/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
)

// Author The author of a change in a repository
type Author struct {
	// The raw author value from the repository. This may be the only value available if the author does not match a user in Bitbucket.
	Raw *string `json:"raw,omitempty"`
	User *Account `json:"user,omitempty"`
}

// NewAuthor instantiates a new Author object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthor() *Author {
	this := Author{}
	return &this
}

// NewAuthorWithDefaults instantiates a new Author object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorWithDefaults() *Author {
	this := Author{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *Author) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Author) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *Author) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *Author) SetRaw(v string) {
	o.Raw = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Author) GetUser() Account {
	if o == nil || o.User == nil {
		var ret Account
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Author) GetUserOk() (*Account, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Author) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given Account and assigns it to the User field.
func (o *Author) SetUser(v Account) {
	o.User = &v
}

func (o Author) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableAuthor struct {
	value *Author
	isSet bool
}

func (v NullableAuthor) Get() *Author {
	return v.value
}

func (v *NullableAuthor) Set(val *Author) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthor(val *Author) *NullableAuthor {
	return &NullableAuthor{value: val, isSet: true}
}

func (v NullableAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


