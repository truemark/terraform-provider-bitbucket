/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"encoding/json"
	"time"
)

// SshKey struct for SshKey
type SshKey struct {
	Object
	// The SSH key's immutable ID.
	Uuid *string `json:"uuid,omitempty"`
	// The SSH public key value in OpenSSH format.
	Key *string `json:"key,omitempty"`
	// The comment parsed from the SSH key (if present)
	Comment *string `json:"comment,omitempty"`
	// The user-defined label for the SSH key
	Label *string `json:"label,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	LastUsed *time.Time `json:"last_used,omitempty"`
	Links *BranchingModelSettingsLinks `json:"links,omitempty"`
}

// NewSshKey instantiates a new SshKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshKey(type_ string) *SshKey {
	this := SshKey{}
	this.Type = type_
	return &this
}

// NewSshKeyWithDefaults instantiates a new SshKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshKeyWithDefaults() *SshKey {
	this := SshKey{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SshKey) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshKey) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SshKey) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SshKey) SetUuid(v string) {
	o.Uuid = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SshKey) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshKey) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SshKey) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SshKey) SetKey(v string) {
	o.Key = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SshKey) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshKey) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SshKey) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SshKey) SetComment(v string) {
	o.Comment = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SshKey) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshKey) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SshKey) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SshKey) SetLabel(v string) {
	o.Label = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *SshKey) GetCreatedOn() time.Time {
	if o == nil || o.CreatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshKey) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || o.CreatedOn == nil {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *SshKey) HasCreatedOn() bool {
	if o != nil && o.CreatedOn != nil {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *SshKey) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *SshKey) GetLastUsed() time.Time {
	if o == nil || o.LastUsed == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshKey) GetLastUsedOk() (*time.Time, bool) {
	if o == nil || o.LastUsed == nil {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *SshKey) HasLastUsed() bool {
	if o != nil && o.LastUsed != nil {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given time.Time and assigns it to the LastUsed field.
func (o *SshKey) SetLastUsed(v time.Time) {
	o.LastUsed = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SshKey) GetLinks() BranchingModelSettingsLinks {
	if o == nil || o.Links == nil {
		var ret BranchingModelSettingsLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshKey) GetLinksOk() (*BranchingModelSettingsLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SshKey) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given BranchingModelSettingsLinks and assigns it to the Links field.
func (o *SshKey) SetLinks(v BranchingModelSettingsLinks) {
	o.Links = &v
}

func (o SshKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedObject, errObject := json.Marshal(o.Object)
	if errObject != nil {
		return []byte{}, errObject
	}
	errObject = json.Unmarshal([]byte(serializedObject), &toSerialize)
	if errObject != nil {
		return []byte{}, errObject
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.CreatedOn != nil {
		toSerialize["created_on"] = o.CreatedOn
	}
	if o.LastUsed != nil {
		toSerialize["last_used"] = o.LastUsed
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableSshKey struct {
	value *SshKey
	isSet bool
}

func (v NullableSshKey) Get() *SshKey {
	return v.value
}

func (v *NullableSshKey) Set(val *SshKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSshKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSshKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshKey(val *SshKey) *NullableSshKey {
	return &NullableSshKey{value: val, isSet: true}
}

func (v NullableSshKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


